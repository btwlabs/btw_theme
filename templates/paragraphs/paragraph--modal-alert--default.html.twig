{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{% set classes = [
  'section',
  'modal-button-wrapper',
  'paragraph',
  'paragraph--type--' ~ paragraph.bundle|clean_class,
  view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
  not paragraph.isPublished() ? 'paragraph--unpublished'
] %}

  <!-- Start: Modal -->
  <div {{ attributes.addClass(classes) }}>
    {{ title_prefix }}
    {{ title_suffix }}
    <!-- Button trigger modal -->
    <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#ModalCenter">
      {{ paragraph.field_modal_trigger_button_name.0.value }}
    </button>
  </div>

  <div class="modal fade" id="ModalCenter" tabindex="-1" role="dialog" aria-labelledby="eModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
      <div class="modal-content">
        <div class="modal-header">
          {% if (paragraph.field_modal_alert_title is not empty) and (paragraph.field_modal_alert_title.0.value != ' ') %}
            <h5 class="modal-title" id="ModalCenterTitle">{{ content.field_modal_alert_title }}</h5>
          {% endif %}
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        {% if not paragraph.field_modal_alert_image is empty %}
          <div class="modal-image">
            {{ content.field_modal_alert_image }}
          </div>
        {% endif %}
        {% if not paragraph.field_modal_alert_message is empty %}
          <div class="modal-body">
            {{ content.field_modal_alert_message }}
          </div>
        {% endif %}
        {% if not paragraph.field_modal_alert_cta_button is empty %}
          <div class="modal-footer">
            {{ content.field_modal_alert_cta_button.0 }}
          </div>
        {% endif %}
      </div>
    </div>
  </div>
  <!-- End: Modal -->

