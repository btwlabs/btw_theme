{#
/**
 * @file
 * Cards 7: Logos layout
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{% set has_parallax = 'parallax' in paragraph.field_image_image_effect.0.value %}
{% set classes = [
  'section',
  'section-cards',
  'cards-logos',
  paragraph.field_cards_extra_classes.0.value,
  'paragraph',
  'paragraph--type--' ~ paragraph.bundle|clean_class,
  view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
  not paragraph.isPublished() ? 'paragraph--unpublished',
  has_parallax ? 'has-parallax'
] %}

  {% set parent = paragraph.getParentEntity().id %}

  {{ content.html_head }}
<!-- Start: Feature Cards -->
<section {{ attributes.addClass(classes) }}>
  {{ title_prefix }}
  {{ title_suffix }}
  <!-- Start: Background Image -->
  <div class="{% if 'fixed' in paragraph.field_image_image_effect.0.value %}fixed{% elseif has_parallax %}parallax-item{% else %}no-effect{% endif %} lazy-load-bg-image"></div>
  <!-- End: Background Image -->
  {% if (not paragraph.field_cards_title is empty) or (not paragraph.field_cards_body is empty) %}

    <div class="image-overlay"></div>
    <!-- Start: Intro -->
    <div class="intro">
      <div class="container">
        <div class="row justify-content-center">
          <div class="col col-lg-8">
            <div class="text-wrapper">
              {% if (paragraph.field_cards_title is not empty) and (paragraph.field_cards_title.0.value != ' ') %}
                <h2 class="section-title">{{ content.field_cards_title }}</h2>
              {% endif %}
              {% if not paragraph.field_cards_body is empty %}
                <div class="intro-body mb-5">{{ paragraph.field_cards_body.0.value|raw }}</div>
              {% endif %}
            </div>
          </div>
        </div>
      </div>
    </div>
    <!-- End: Intro -->
  {% endif %}

  {% if not paragraph.field_cards_card_grid is empty %}
    <!-- Start: Card Group -->
    <div class="container-fluid subcard-wrapper">
      <div class="row">
        {{ content.field_cards_card_grid }}
      </div>
    </div>
    <!-- End: Cards -->
  {% endif %}
</section>
<!-- End: Feature Cards -->

