{#
/**
 * @file
 * Default theme implementation to display a snipcart button on an album.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{% set parent = paragraph.getParentEntity() %}
{% set parentNode = parent.getParentEntity() %}
{% set classes = [
  'product-id',
  'mb-3',
  'paragraph',
  'paragraph--type--' ~ paragraph.bundle|clean_class,
  view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
  not paragraph.isPublished() ? 'paragraph--unpublished'
] %}

{% if not paragraph.field_product_sku.0.value is empty %}
  {{ title_prefix }}
  {{ title_suffix }}
  <div
    {{ attributes.addClass(classes) }}
    class="product-id mb-3"
    itemprop="productID"
    content="sku:{{ paragraph.field_product_sku.0.value }}"
  ></div>
  <div
    itemprop="offers"
    itemscope
    itemtype="https://schema.org/Offer"
  >
    <span itemprop="priceCurrency" content="USD"></span>
    <span itemprop="price" content="{{ paragraph.field_product_price.0.value }}">
     ${{ paragraph.field_product_price.0.value|number_format(2, '.', ',') }}
    </span>
  </div>

  <button
    class="snipcart-add-item btn btn-primary btn-block"
    data-item-id="{{ paragraph.field_product_sku.0.value }}"
    data-item-price="{{ paragraph.field_product_price.0.value }}"
    data-item-url="/node/{{ parentNode.id() }}"
    data-item-description="{{ parent.body.0.value }}"
    {% if parent.field_album_art.0 is not empty %}data-item-image="{{ base_url ~ file_url(parent.field_album_art.0.entity.fileuri | image_style('card_image')) }}" {% endif %}
    data-item-name="{{ parent.field_album_name.0.value }} - {{ parent.field_album_artist_name.0.value }}"
    {% if paragraph.field_product_weight.0.value is not empty %}data-item-weight="{{ paragraph.field_product_weight.0.value }}"{% endif %}
    {% if paragraph.field_product_height.0.value is not empty %}data-item-height="{{ paragraph.field_product_height.0.value }}"{% endif %}
    {% if paragraph.field_product_width.0.value is not empty %}data-item-width="{{ paragraph.field_product_width.0.value }}"{% endif %}
    {% if paragraph.field_product_length.0.value is not empty %}data-item-length="{{ paragraph.field_product_length.0.value }}"{% endif %}
    {% for item in paragraph.field_snipcart_attributes %}
      data-item-custom{{ loop.index }}-name="{{ item.name }}"
      {% if item.type != 'dropdown' and items.type != 'textbox' %}
        data-item-custom{{ loop.index }}-type="{{ item.type }}"
      {% endif %}
      {% if item.type == 'dropdown' %}
        data-item-custom{{ loop.index }}-options="{{ item.options }}"
      {% endif %}
      {% if item.value is not empty %}
        data-item-custom{{ loop.index }}-value="{{ item.value }}"
      {% endif %}
      {% if item.placeholder is not empty %}
        data-item-custom{{ loop.index }}-placeholder="{{ item.placeholder }}"
      {% endif %}
    {% endfor %}
  >
    Add to cart
  </button>
{% endif %}
