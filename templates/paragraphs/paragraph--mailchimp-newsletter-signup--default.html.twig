{#
/**
 * @file
 * Mailchimp newsletter signup form.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{% set classes = [
  'section',
  'section-subscribe',
  paragraph.field_mailchimp_classes.0.value,
  'paragraph',
  'paragraph--type--' ~ paragraph.bundle|clean_class,
  view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
  not paragraph.isPublished() ? 'paragraph--unpublished'
] %}

  <!-- Start: Newsletter Subscription -->
  <section {{ attributes.addClass(classes) }}>
    {{ title_prefix }}
    {{ title_suffix }}

    <!-- Start: Intro -->
    <div class="intro mb-5">
      <div class="container">
        <div class="row justify-content-center">
          <div class="col col-lg-8">
            <div class="text-wrapper">
              {% if (paragraph.field_title is not empty) and (paragraph.field_title.0.value != ' ') %}
                {{ content.field_title }}
              {% endif %}
              {% if not paragraph.field_mailchimp_body is empty %}
                <div class="intro-body mb-5">{{ paragraph.field_mailchimp_body.0.value|raw }}</div>
              {% endif %}
            </div>
          </div>
        </div>
      </div>
    </div>
    <!-- End: Intro -->

    {% if paragraph.field_mailchimp_embed_code is not empty %}
      <div class="container">
        {{ paragraph.field_mailchimp_embed_code.value|raw }}
        <script type='text/javascript' src='//s3.amazonaws.com/downloads.mailchimp.com/js/mc-validate.js'></script><script type='text/javascript'>(function($) {window.fnames = new Array(); window.ftypes = new Array();fnames[0]='EMAIL';ftypes[0]='email';fnames[1]='FNAME';ftypes[1]='text';fnames[2]='LNAME';ftypes[2]='text';fnames[3]='MMERGE3';ftypes[3]='text';fnames[4]='MMERGE4';ftypes[4]='text';fnames[5]='MMERGE5';ftypes[5]='text';}(jQuery));var $mcj = jQuery.noConflict(true);</script>
        <!--End mc_embed_signup-->
      </div>
    {% endif %}
    <script>
      let {{ attributes.id|replace({'-':''}) }}El = document.getElementById('{{ attributes.id }}');
      let event{{ attributes.id|replace({'-':''}) }} = new CustomEvent('section-loaded', {bubbles: true});
      // set up the mutation observer
      let {{ attributes.id|replace({'-':''}) }}observer = new MutationObserver(function (mutations, me) {
        {{ attributes.id|replace({'-':''}) }}El.dispatchEvent(event{{ attributes.id|replace({'-':''}) }});
      });

      // start observing
      {{ attributes.id|replace({'-':''}) }}observer.observe({{ attributes.id|replace({'-':''}) }}El, {
        childList: true,
        subtree: true,
        attributes: true
      });
    </script>
  </section>
  <!-- End: Newsletter Subscription-->

